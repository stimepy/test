<?php
###############################################################
##X1plugin Competition Management
##Homepage::http://www.aodhome.com.com
##Copyright:: Kris Sherrerd 2009
##Version 2.6.4
###############################################################
if (!defined('X1plugin_include'))exit();
###############################################################


//misc
class X1Misc{
	
	/*################################################
	 	name:X1PluginMail
		what does it do: Gets the mail template, and updates the template with appropriate values 
		needs:string $
		returns:Returns an array of directories on success and false otherwise.
	 ##################################################*/
	function X1PluginEmail($team_mail, $template, $content, $subject=''){
		//For older versions, no longer in use
		//if(str_split(str_replace(".","",preg_replace("/[^0-9\.]+/","",phpversion())),3) > 430){
			//$temp = @file_get_contents(X1_emailpath."/".$template);
		//}
	$temp = implode("\n", file(X1_emailpath."/".$template));
	if($temp){
		foreach($content AS $key=>$val){
			$temp = str_replace("<? $key ?>", $val, $temp);
		}
		$sub = (empty($subject)) ? X1_emailsubject : $subject;
		mail($team_mail, $sub, $temp,"From:".X1_returnmail."\nX-Mailer: PHP/" . phpversion());
		if(X1_emaildebug){
			return "Email sent to ".$team_mail;
		}
	}else{
		if(X1_emaildebug){
			return "Failed to load email template :: $template<br />\n";
		}
	}
}

	/*################################################
	 	name:X1PluginRandId
		what does it do: Generates a random ID; 
		needs:N/A
		returns:Returns a random ID number
	 ##################################################*/
	function X1PluginRandid(){
		return mt_rand(1,99999999);
	}

	/*################################################
	 	name:ExpireChallenge
		what does it do: Checks for expired challenges and does as appropriate per event 
		needs:N/A
		returns:true on successfully finding and updating expired challenges, false on failure or no expired challenges.
	 ##################################################*/
	function ExpireChallenges(){
	   $rows = SqlGetAll(X1_prefix.X1_DB_teamchallenges.".*, ".X1_prefix.X1_DB_events.".expirechalls, ".X1_prefix.X1_DB_events.".expirehours, ".X1_prefix.X1_DB_events.".expirepen, ".X1_prefix.X1_DB_events.".expirebon, ".X1_prefix.X1_DB_events.".title",X1_DB_teamchallenges.", ".X1_prefix.X1_DB_events, " WHERE ".X1_prefix.X1_DB_events.".sid=".X1_prefix.X1_DB_teamchallenges.".ladder_id and ".X1_prefix.X1_DB_teamchallenges.".temp=1");

	   if($rows){
			foreach($rows AS $row){
			 	$names=X1TeamUser::SetTeamName(array($row['winner'],$row['loser']));
			//	$event = SqlGetRow("expirechalls, expirehours, expirepen, expirebon, title",X1_DB_events," WHERE sid=".MakeItemString($row['ladder_id']));
				if($row['expirechalls']){
					$expiretime = $row['date'] + ($row['expirehours']*3600);
					if (time() > $expiretime){
						ModifySql("delete from", X1_DB_teamchallenges, " WHERE randid=".MakeItemString($row['randid']));
						ModifySql("UPDATE", X1_DB_teamsevents, " SET points=points + $row[expirebon], challyesno ='No', challenged ='".XL_challenges_expired."' WHERE team_id=".MakeItemString($row['winner'])."	AND ladder_id=".MakeItemString($row['sid']));
						ModifySql("UPDATE", X1_DB_teamsevents, " SET points=points - $row[expirepen], challyesno ='No', challenged ='".XL_challenges_expired."' WHERE team_id=".MakeItemString($row['loser'])." AND ladder_id=".MakeItemString($event['sid']));
						if (X1_emailon){
							$challenger = SqlGetRow("mail",X1_DB_teams," WHERE team_id=".MakeItemString($row['loser']));
							$challenged = SqlGetRow("mail",X1_DB_teams," WHERE team_id=".MakeItemString($row['winner']));
							$content = array(
								'team1' =>  $names[$row['winner']],
								'team2' =>  $names[$row['loser']],
								'event' => $row['title']);
							X1plugin_email($challenger["mail"], "expire_challenger.tpl", $content);
							X1plugin_email($challenged["mail"], "expire_challenged.tpl", $content);
							return true;
						}
					}
				}
			}
		}
		return false;
	} 


	/*################################################
	 	name:MapInfo
		what does it do:Gets information on the map (name, pic, dwnload) 
		needs:int $ladder_id:The events ID, int $map_id:The maps ID
		returns:Returns an array of map info (Name, Pic, Mapdownload location) on success.  False otherwise.
	 ##################################################*/
	function MapInfo($map_id){
		if(empty($map_id))return false;
		$row = SqlGetAll("*",X1_DB_maps," WHERE mapid In(".$map_id.")");

		foreach($row as $map){
			$maps[$map['mapid']]=array($map["mapname"], $map["mappic"], $map["mapdl"]);
		}
		return $maps;
	}
	
	/*###############################################
	Name:
	What does it do:
	Needs:
	returns:
	Version:1.0.1
	###################################################*/
	/*Original Copyright:
	    MOO CMS, Copyright (c) 2005 The MOO Dev. Group. All rights reserved.
    This source file is free software; you can redistribute it and/or
    modify it under the terms of the MOO Public License as published
    by the MOO Development Group; either version 1 of the License, or
    (at your option) any later version.
    CVS: 1.26
    http://cvs.moocms.com/moo/moo_core/handlers/security.php
*/
	function get_ip()
  {
        static $visitor_ip;
        if (!empty($visitor_ip)) { return $visitor_ip; }
        $visitor_ip = (!empty($_SERVER['REMOTE_ADDR'])) ? $_SERVER['REMOTE_ADDR'] : $_ENV['REMOTE_ADDR'];
        $ips = array();
        if (!empty($_SERVER['HTTP_X_FORWARDED_FOR']) && $_SERVER['HTTP_X_FORWARDED_FOR'] != 'unknown') {
            $ips = explode(', ', $_SERVER['HTTP_X_FORWARDED_FOR']);
        }
        if (!empty($_SERVER['HTTP_CLIENT_IP']) && $_SERVER['HTTP_CLIENT_IP'] != 'unknown') {
            $ips[] = $_SERVER['HTTP_CLIENT_IP'];
        }
        for ($i = 0; $i < count($ips); $i++) {
            $ips[$i] = trim($ips[$i]);
            # IPv4
            if (strstr($ips[$i], '.')) {
                # check for a hybrid IPv4-compatible address
                $pos = strrpos($ips[$i], ':');
                if ($pos !== FALSE) { $ips[$i] = substr($ips[$i], $pos+1); }
                # Don't assign local network ip's
                if (preg_match('#^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$#', $ips[$i]) &&
                    !preg_match('#^(10|127.0.0|172.(1[6-9]|2[0-9]|3[0-1])|192\.168)\.#', $ips[$i]))
                {
                    $visitor_ip = $ips[$i];
                    break;
                }
            }
            # IPv6
            else if (strpos($ips[$i], ':') !== FALSE) {
                # fix shortened ip's
                $c = substr_count($ips[$i], ':');
                if ($c < 7) { $ips[$i] = str_replace('::', str_pad('::', 9-$c, ':'), $ips[$i]); }
                if (preg_match('#^([0-9A-F]{0,4}:){7}[0-9A-F]{0,4}$#i', $ips[$i])) {
                    $visitor_ip = $ips[$i];
                    break;
                }
            }
  	     }
        return $visitor_ip;
  }
	

}
?>