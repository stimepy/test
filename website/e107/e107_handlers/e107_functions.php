<?phpfunction js_location($qry){	global $error_handler;	if (count($error_handler->errors)) {		echo $error_handler->return_errors();		exit;	} else {		echo "<script type='text/javascript'>document.location.href='{$qry}'</script>\n"; exit;	}}function check_email($email) {	return preg_match("/^([_a-zA-Z0-9-+]+)(\.[_a-zA-Z0-9-]+)*@([a-zA-Z0-9-]+)(\.[a-zA-Z0-9-]+)*(\.[a-zA-Z]{2,6})$/" , $email) ? $email : FALSE;}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------///** * * @param mixed $var * @param string $userclass * @param mixed $peer * @param boolean $debug * @return boolean */function check_class($var, $userclass = USERCLASS, $peer = FALSE, $debug = FALSE){	global $tp;	if($var == e_LANGUAGE){		return TRUE;	}	if (is_numeric($var) && !$var) return TRUE;		// Accept numeric class zero - 'PUBLIC'	if (!$var || $var == '')	{	// ....but an empty string or NULL variable is not valid		return FALSE;	}	if(strpos($var, ',') !== FALSE)	{		$lans = explode(',', e_LANLIST);		$varList = explode(',', $var);		rsort($varList); // check the language first.(ie. numbers come last)		foreach($varList as $v)		{			if (in_array($v,$lans) && strpos($v, e_LANGUAGE) === FALSE) {				return FALSE;			}			if(check_class($v, $userclass, $debug))	{				return TRUE;			}		}		return FALSE;	}		//if peer is array, assume it's a user record	if(is_array($peer)) {		$_adminperms = ($peer['user_admin'] === 1 ? $peer['user_perms'] : '');		$_user = true;		$_admin = $peer['user_admin'] === 1;		$peer = false;	} else {		$_adminperms = defined('ADMINPERMS') ? ADMINPERMS : '';		$_user = USER;		$_admin = ADMIN;	}	//Test 'special' userclass numbers	if (preg_match("/^([0-9]+)$/", $var) && !$peer)	{		if ($var == e_UC_MAINADMIN && getperms('0', $_adminperms))		{        	return TRUE;		}		if ($var == e_UC_MEMBER && $_user == TRUE)		{			return TRUE;		}		if ($var == e_UC_GUEST && $_user == FALSE) {			return TRUE;		}		if ($var == e_UC_PUBLIC) {			return TRUE;		}		if ($var == e_UC_NOBODY) {			return FALSE;		}		if ($var == e_UC_ADMIN && $_admin) {			return TRUE;		}		if ($var == e_UC_READONLY) {			return TRUE;		}	}	if ($debug) {		echo "USERCLASS: ".$userclass.", \$var = $var : ";	}	if (!defined("USERCLASS") || $userclass == "") {		if ($debug) {			echo "FALSE<br />";		}		return FALSE;	}	// user has classes set - continue	if (preg_match("/^([0-9]+)$/", $var)) {		$tmp=explode(',', $userclass);		if (is_numeric(array_search($var, $tmp))) {			if ($debug) {				echo "TRUE<br />";			}			return TRUE;		}	} else {		// var is name of class ...		$sql=new db;		if ($sql->db_Select("userclass_classes", "*", "userclass_name='".$tp -> toDB($var)."' ")) {			$row=$sql->db_Fetch();			$tmp=explode(',', $userclass);			if (is_numeric(array_search($row['userclass_id'], $tmp))) {				if ($debug) {					echo "TRUE<br />";				}				return TRUE;			}		}	}	if ($debug) {		echo "NOTNUM! FALSE<br />";	}	return FALSE;}function getperms($arg, $ap = ADMINPERMS){	global $PLUGINS_DIRECTORY;		if(!ADMIN)	{		return FALSE;	}	if ($ap == "0")	{		return TRUE;	}	if ($ap == "")	{		return FALSE;	}	$ap='.'.$ap;	if ($arg == 'P' && preg_match("#(.*?)/".$PLUGINS_DIRECTORY."(.*?)/(.*?)#", e_SELF, $matches))	{		$psql=new db;		if ($psql->db_Select('plugin', 'plugin_id', "plugin_path = '".$matches[2]."' "))		{			$row=$psql->db_Fetch();			$arg='P'.$row[0];		}	}	if (strpos($ap, ".".$arg.".") !== FALSE)	{		return TRUE;	}	else	{		return FALSE;	}}/** * Get the user data from user and user_extended tables * * @return array */function get_user_data($uid, $extra = ""){	global $pref, $sql;	$uid = intval($uid);	$var = array();	if($uid == 0) { return $var; }	if($ret = getcachedvars("userdata_{$uid}"))	{		return $ret;	}	$qry = "	SELECT u.*, ue.* FROM #user AS u	LEFT JOIN #user_extended AS ue ON ue.user_extended_id = u.user_id	WHERE u.user_id = {$uid} {$extra}	";	if (!$sql->db_Select_gen($qry))	{		$qry = "SELECT * FROM #user AS u WHERE u.user_id = {$uid} {$extra}";		if(!$sql->db_Select_gen($qry))		{			return FALSE;		}	}	$var = $sql->db_Fetch(MYSQL_ASSOC);	$extended_struct = getcachedvars("extended_struct");	if(!$extended_struct)	{		unset($extended_struct);		$qry = "SHOW COLUMNS FROM #user_extended ";		if($sql->db_Select_gen($qry))		{			while($row = $sql->db_Fetch(MYSQL_ASSOC))			{				if($row['Default'] != "")				{					$extended_struct[] = $row;				}			}			if(isset($extended_struct))			{				cachevars("extended_struct", $extended_struct);			}		}	}	if(isset($extended_struct))	{		foreach($extended_struct as $row)		{			if($row['Default'] != "" && ($var[$row['Field']] == NULL || $var[$row['Field']] == "" ))			{				$var[$row['Field']] = $row['Default'];			}		}	}	if ($var['user_perms'] == '0.') $var['user_perms'] = '0';		// Handle some legacy situations	cachevars("userdata_{$uid}", $var);	return $var;}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//function save_prefs($table = 'core', $uid = USERID, $row_val = ''){  global $pref, $user_pref, $tp, $PrefCache, $sql, $eArrayStorage;  if ($table == 'core')  {	if ($row_val == '')	{		// Save old version as a backup first	  $sql->db_Select_gen("REPLACE INTO `#core` (e107_name,e107_value) values ('SitePrefs_Backup', '".addslashes($PrefCache)."') ");	  // Now save the updated values	  // traverse the pref array, with toDB on everything	  $_pref = $tp -> toDB($pref, true, true, 'pReFs');	  // Create the data to be stored	  $sql->db_Select_gen("REPLACE INTO `#core` (e107_name,e107_value) values ('SitePrefs', '".$eArrayStorage->WriteArray($_pref)."') ");	  ecache::clear('SitePrefs');	}  }  else  {	$_user_pref = $tp -> toDB($user_pref);	$tmp=addslashes(serialize($_user_pref));	$sql->db_Update("user", "user_prefs='$tmp' WHERE user_id=".intval($uid));	return $tmp;  }}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//function cachevars($id, $var) {	global $cachevar;	$cachevar[$id]=$var;}function getcachedvars($id) {	global $cachevar;	return (isset($cachevar[$id]) ? $cachevar[$id] : false);}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------////------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//function init_session() {	/*	# Validate user	#	# - parameters none	# - return boolean	# - scope public	*/	global $sql, $pref, $user_pref, $tp, $currentUser, $e107;	define('USERIP', $e107->getip());	if (!isset($_COOKIE[$pref['cookie_name']]) && !isset($_SESSION[$pref['cookie_name']]))	{		setGuest();	}	else	{		list($uid, $upw)=(isset($_COOKIE[$pref['cookie_name']]) && $_COOKIE[$pref['cookie_name']] ? explode(".", $_COOKIE[$pref['cookie_name']]) : explode(".", $_SESSION[$pref['cookie_name']]));		if (empty($uid) || empty($upw))		{			cookie($pref['cookie_name'], "", (time() - 2592000));			$_SESSION[$pref['cookie_name']] = "";			session_destroy();			setGuest();			define('USERCLASS_LIST', class_list());			define('LOGINMESSAGE',CORE_LAN10.'<br /><br />');			return (FALSE);		}		$result = get_user_data($uid);		if(is_array($result) && (md5($result['user_password']) == $upw) && ($result['user_ban'] == 0))		{			define('USER', TRUE);			define('USERID', $result['user_id']);			define('USERNAME', $result['user_name']);			define('USERURL', (isset($result['user_homepage']) ? $result['user_homepage'] : false));			define('USEREMAIL', $result['user_email']);			define('USERCLASS', $result['user_class']);			define('USERREALM', $result['user_realm']);			define('USERVIEWED', $result['user_viewed']);			define('USERIMAGE', $result['user_image']);			define('USERSESS', $result['user_sess']);			$update_ip = ($result['user_ip'] != USERIP ? ", user_ip = '".USERIP."'" : "");			if($result['user_currentvisit'] + 3600 < time() || !$result['user_lastvisit'])			{	// New visit				$result['user_lastvisit'] = $result['user_currentvisit'];				$result['user_currentvisit'] = time();				$sql->db_Update('user', "user_visits = user_visits + 1, user_lastvisit = '{$result['user_lastvisit']}', user_currentvisit = '{$result['user_currentvisit']}', user_viewed = ''{$update_ip} WHERE user_id=".USERID);			}			else			{				$result['user_currentvisit'] = time();				$sql->db_Update('user', "user_currentvisit = '{$result['user_currentvisit']}'{$update_ip} WHERE user_id=".USERID);			}			$currentUser = $result;			$currentUser['user_realname'] = $result['user_login']; // Used by force_userupdate			define('USERLV', $result['user_lastvisit']);			if ($result['user_admin'])			{				define('ADMIN', TRUE);				define('ADMINID', $result['user_id']);				define('ADMINNAME', $result['user_name']);				define('ADMINPERMS', $result['user_perms']);				define('ADMINEMAIL', $result['user_email']);				define('ADMINPWCHANGE', $result['user_pwchange']);			}			else			{				define('ADMIN', FALSE);			}			$user_pref = unserialize($result['user_prefs']);			$tempClasses = class_list();			if (check_class(varset($pref['allow_theme_select'],FALSE), $tempClasses))			{	// User can set own theme				if (isset($_POST['settheme']))				{					$user_pref['sitetheme'] = ($pref['sitetheme'] == $_POST['sitetheme'] ? "" : $_POST['sitetheme']);					save_prefs('user');				}			}			elseif (isset($user_pref['sitetheme']))			{	// User obviously no longer allowed his own theme - clear it				unset($user_pref['sitetheme']);				save_prefs('user');			}			define("USERTHEME", (isset($user_pref['sitetheme']) && file_exists(e_THEME.$user_pref['sitetheme']."/theme.php") ? $user_pref['sitetheme'] : FALSE));//			global $ADMIN_DIRECTORY, $PLUGINS_DIRECTORY;   Don't look very necessary		}		else		{			setGuest();			define('CORRUPT_COOKIE', TRUE);		}	}	define('USERCLASS_LIST', class_list());	define('e_CLASS_REGEXP', "(^|,)(".str_replace(",", "|", USERCLASS_LIST).")(,|$)");////	if(USER)//	{//		define('POST_REFERER', md5($currentUser['user_password'].$currentUser['user_lastvisit'].USERCLASS_LIST));//	}//	else//	{//		define('POST_REFERER', '');//	}//	if(isset($_POST['__referer']) && $_POST['__referer'] != POST_REFERER) {//		header('location:'.e_BASE.'index.php');//		exit;//	}}/** *	Set all the defines appropriate to a guest (visitor or user who isn't logged in) */function setGuest(){	define('USER', FALSE);	define('ADMIN', FALSE);	define('GUEST', TRUE);	define('USERID', 0);	define('USERTHEME', FALSE);	define('USERCLASS', '');	define('USEREMAIL', '');	define('USERURL', '');	define('USEREMAIL', '');	define('USERREALM', '');	define('USERVIEWED', '');	define('USERIMAGE', '');	define('USERSESS', '');}function cookie($name, $value, $expire=0, $path = e_HTTP, $domain = "", $secure = 0){	if(!e_SUBDOMAIN || (defined('MULTILANG_SUBDOMAIN') && MULTILANG_SUBDOMAIN === TRUE))	{		$domain = ".".e_DOMAIN;	}	setcookie($name, $value, $expire, $path, $domain, $secure);}//// Use these to combine isset() and use of the set value. or defined and use of a constant// i.e. to fix  if($pref['foo']) ==> if ( varset($pref['foo']) ) will use the pref, or ''.// Can set 2nd param to any other default value you like (e.g. false, 0, or whatever)// $testvalue adds additional test of the value (not just isset())// Examples:// $something = pref;  // Bug if pref not set         ==> $something = varset(pref);// $something = isset(pref) ? pref : "";              ==> $something = varset(pref);// $something = isset(pref) ? pref : default;         ==> $something = varset(pref,default);// $something = isset(pref) && pref ? pref : default; ==> use varsettrue(pref,default)//function varset(&$val,$default='') {	if (isset($val)) {		return $val;	}	return $default;}function defset($str,$default='') {	if (defined($str)) {		return constant($str);	}	return $default;}//// These variants are like the above, but only return the value if both set AND 'true'//function varsettrue(&$val,$default='') {	if (isset($val) && $val) return $val;	return $default;}function defsettrue($str,$default='') {	if (defined($str) && constant($str)) return constant($str);	return $default;}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//function message_handler($mode, $message, $line = 0, $file = "") {	e107_require_once(e_HANDLER."message_handler.php");	show_emessage($mode, $message, $line, $file);}// -----------------------------------------------------------------------------function table_exists($check) {    global $sql;	if (!$GLOBALS['mySQLtablelist']) {		$tablist= $sql->getTablelist(); // mysql_list_tables($GLOBALS['mySQLdefaultdb']);		while ($tablist) {			$GLOBALS['mySQLtablelist'][] = $tablist++;		}	}	$mltable=MPREFIX.strtolower($check);	foreach ($GLOBALS['mySQLtablelist'] as $lang) {		if (strpos($lang, $mltable) !== FALSE) {			return TRUE;		}	}}// ---------------------------------------------------------------------------function class_list($uid = '') {	$clist=array();	if ($uid == '')	{		if (USER === TRUE)		{			if(USERCLASS)			{				$clist=explode(',', USERCLASS);			}			$clist[]=e_UC_MEMBER;			if (ADMIN === TRUE) {				$clist[] = e_UC_ADMIN;			}			if (getperms('0')) {			  $clist[] = e_UC_MAINADMIN;			}		} else {			$clist[] = e_UC_GUEST;		}		$clist[]=e_UC_READONLY;		$clist[]=e_UC_PUBLIC;		return implode(',', $clist);	}}// ---------------------------------------------------------------------------function e107_include($fname) {	global $e107_debug;	$ret = ($e107_debug ? include($fname) : @include($fname));	return $ret;}function e107_include_once($fname) {	global $e107_debug;	if(is_readable($fname)){		$ret = (!$e107_debug)? @include_once($fname) : include_once($fname);	}	return (isset($ret)) ? $ret : "";}function e107_require_once($fname) {	global $e107_debug;	$ret = ($e107_debug ? require_once($fname) : @require_once($fname));	return $ret;}function e107_require($fname) {	global $e107_debug;	$ret = ($e107_debug ? require($fname) : @require($fname));	return $ret;}function include_lan($path, $force = FALSE){	if ( ! is_readable($path))	{		$path = str_replace(e_LANGUAGE, 'English', $path);	}	$ret = ($force) ? e107_include($path) : e107_include_once($path);	return (isset($ret)) ? $ret : '';}// Check that all required user fields (including extended fields) are valid.// Return TRUE if update requiredfunction force_userupdate(){	global $sql,$pref,$currentUser;	if (e_PAGE == "usersettings.php" || strpos(e_SELF, ADMINDIR) == TRUE || (defined("FORCE_USERUPDATE") && (FORCE_USERUPDATE == FALSE)))	{		return FALSE;	}    $signup_option_names = array("realname", "signature", "image", "timezone", "class");	foreach($signup_option_names as $key => $value)	{		if ($pref['signup_option_'.$value] == 2 && !$currentUser['user_'.$value])		{			return TRUE;		}    }	if (!varset($pref['disable_emailcheck'],TRUE) && !trim($currentUser['user_email'])) return TRUE;	if($sql -> db_Select('user_extended_struct', 'user_extended_struct_applicable, user_extended_struct_write, user_extended_struct_name, user_extended_struct_type', 'user_extended_struct_required = 1 AND user_extended_struct_applicable != '.e_UC_NOBODY))	{		while($row = $sql -> db_Fetch())		{			if (!check_class($row['user_extended_struct_applicable'])) { continue; }		// Must be applicable to this user class			if (!check_class($row['user_extended_struct_write'])) { continue; }				// And user must be able to change it			$user_extended_struct_name = "user_{$row['user_extended_struct_name']}";			if (!isset($currentUser[$user_extended_struct_name]))			{				return TRUE;			}			if (($row['user_extended_struct_type'] == 7) && ($currentUser[$user_extended_struct_name] == '0000-00-00'))			{				return TRUE;			}		}	}	return FALSE;}/** * Strips slashes from a var if magic_quotes_gqc is enabled * * @param mixed $data * @return mixed */function strip_if_magic($data) {	if (MAGIC_QUOTES_GPC == true) {		return array_stripslashes($data);	} else {		return $data;	}}/** * Strips slashes from a string or an array * * @param mixed $value * @return mixed */function array_stripslashes($data) {	return is_array($data) ? array_map('array_stripslashes', $data) : stripslashes($data);}function e107_ini_set($var, $value){	if (function_exists('ini_set'))	{		return ini_set($var, $value);	}	return FALSE;}/** * @param $id * @param $name * @param $home * @param string $param * @return string */function e107UserUrl($id, $name=-1, $home=-1, $param=''){    if($name!=-1){        if($home==-1){            return "<a href='".e_BASE."forums/memberlist.php?mode=viewprofile&u={$id}'>{$name}</a> ";       // user.php?id.        }        return "<a href='". $home ."forums/memberlist.php?mode=viewprofile&u={$id}' {$param}>{$name}</a> ";    }    else{        return "forums/memberlist.php?mode=viewprofile&u={$id}";    }}?>